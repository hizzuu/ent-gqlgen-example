// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/hizzuu/plate-backend/ent/user"
)

// CreateImageInput represents a mutation input for creating images.
type CreateImageInput struct {
	Name      string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	PostsID   *int
	UsersID   *int
}

// Mutate applies the CreateImageInput on the ImageCreate builder.
func (i *CreateImageInput) Mutate(m *ImageCreate) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.PostsID; v != nil {
		m.SetPostsID(*v)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the CreateImageInput on the create builder.
func (c *ImageCreate) SetInput(i CreateImageInput) *ImageCreate {
	i.Mutate(c)
	return c
}

// UpdateImageInput represents a mutation input for updating images.
type UpdateImageInput struct {
	ID         int
	Name       *string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	PostsID    *int
	ClearPosts bool
	UsersID    *int
	ClearUsers bool
}

// Mutate applies the UpdateImageInput on the ImageMutation.
func (i *UpdateImageInput) Mutate(m *ImageMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.PostsID; v != nil {
		m.SetPostsID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateImageInput on the update builder.
func (u *ImageUpdate) SetInput(i UpdateImageInput) *ImageUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateImageInput on the update-one builder.
func (u *ImageUpdateOne) SetInput(i UpdateImageInput) *ImageUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	Title      string
	Contents   string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	UserID     int
	PhotoID    int
	PhotoImage *graphql.Upload
}

// Mutate applies the CreatePostInput on the PostCreate builder.
func (i *CreatePostInput) Mutate(m *PostCreate) {
	m.SetTitle(i.Title)
	m.SetContents(i.Contents)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetPhotoID(i.PhotoID)
}

// SetInput applies the change-set in the CreatePostInput on the create builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c)
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	ID         int
	Title      *string
	Contents   *string
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	UserID     *int
	ClearUser  bool
	PhotoID    *int
	ClearPhoto bool
}

// Mutate applies the UpdatePostInput on the PostMutation.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Contents; v != nil {
		m.SetContents(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearPhoto {
		m.ClearPhoto()
	}
	if v := i.PhotoID; v != nil {
		m.SetPhotoID(*v)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the update builder.
func (u *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdatePostInput on the update-one builder.
func (u *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	UID       string
	Nickname  string
	Bio       string
	Role      user.Role
	CreatedAt *time.Time
	UpdatedAt *time.Time
	PostIDs   []int
	AvatarID  *int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetUID(i.UID)
	m.SetNickname(i.Nickname)
	m.SetBio(i.Bio)
	m.SetRole(i.Role)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.PostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
	if v := i.AvatarID; v != nil {
		m.SetAvatarID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ID            int
	Nickname      *string
	Bio           *string
	Role          *user.Role
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	AddPostIDs    []int
	RemovePostIDs []int
	AvatarID      *int
	ClearAvatar   bool
	AvatarImage   *graphql.Upload
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if v := i.Bio; v != nil {
		m.SetBio(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.AddPostIDs; len(ids) > 0 {
		m.AddPostIDs(ids...)
	}
	if ids := i.RemovePostIDs; len(ids) > 0 {
		m.RemovePostIDs(ids...)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.AvatarID; v != nil {
		m.SetAvatarID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
